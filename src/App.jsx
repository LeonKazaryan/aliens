import { useState, useEffect, useRef } from 'react'
import { motion, useScroll, useTransform } from 'framer-motion'
import { Canvas, useFrame } from '@react-three/fiber'
import { Stars, OrbitControls } from '@react-three/drei'
import gsap from 'gsap'
import './App.css'

// 3D UFO Component
function UFO({ position, speed }) {
  const meshRef = useRef()
  
  useFrame((state) => {
    meshRef.current.position.x += speed * 0.01
    meshRef.current.rotation.y += 0.01
    meshRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 2) * 0.1
    
    // Reset position when UFO goes off screen
    if (meshRef.current.position.x > 20) {
      meshRef.current.position.x = -20
    }
  })

  return (
    <group ref={meshRef} position={position}>
      {/* UFO Body */}
      <mesh>
        <cylinderGeometry args={[1, 1.5, 0.3, 8]} />
        <meshStandardMaterial color="#4a90e2" metalness={0.8} roughness={0.2} />
      </mesh>
      {/* UFO Dome */}
      <mesh position={[0, 0.2, 0]}>
        <sphereGeometry args={[0.8, 16, 16]} />
        <meshStandardMaterial color="#7bb3f0" transparent opacity={0.7} />
      </mesh>
      {/* UFO Lights */}
      <mesh position={[0, -0.1, 0]}>
        <ringGeometry args={[0.5, 1.2, 8]} />
        <meshStandardMaterial color="#00ff88" emissive="#00ff88" emissiveIntensity={0.5} />
      </mesh>
    </group>
  )
}

// Animated Counter Component
function AnimatedCounter({ value }) {
  const [displayValue, setDisplayValue] = useState(0)
  
  useEffect(() => {
    const duration = 2000
    const startValue = displayValue
    const endValue = value
    
    gsap.to({}, {
      duration: duration / 1000,
      onUpdate: function() {
        const currentValue = Math.floor(startValue + (endValue - startValue) * this.progress())
        setDisplayValue(currentValue)
      }
    })
  }, [value])

  return (
    <motion.span
      initial={{ scale: 0 }}
      animate={{ scale: 1 }}
      transition={{ type: "spring", stiffness: 200 }}
      className="counter-number"
    >
      {displayValue.toLocaleString()}
    </motion.span>
  )
}

// Animated Logo Component
function AnimatedLogo() {
  return (
    <motion.div 
      className="animated-logo"
      animate={{ 
        rotate: [0, 360],
        scale: [1, 1.1, 1]
      }}
      transition={{ 
        rotate: { duration: 20, repeat: Infinity, ease: "linear" },
        scale: { duration: 3, repeat: Infinity, ease: "easeInOut" }
      }}
    >
      <div className="logo-earth">üåç</div>
      <motion.div 
        className="logo-tentacle"
        animate={{ 
          rotate: [0, 45, -45, 0],
          scale: [1, 1.2, 1]
        }}
        transition={{ 
          duration: 4, 
          repeat: Infinity, 
          ease: "easeInOut" 
        }}
      >
        ü¶ë
      </motion.div>
    </motion.div>
  )
}

// Timeline Item Component
function TimelineItem({ year, title, description, delay }) {
  return (
    <motion.div 
      className="timeline-item"
      initial={{ opacity: 0, x: -100 }}
      whileInView={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.8, delay }}
      viewport={{ once: true }}
    >
      <div className="timeline-marker">
        <motion.div 
          className="timeline-dot"
          animate={{ 
            scale: [1, 1.3, 1],
            boxShadow: [
              "0 0 0 0 rgba(0, 255, 136, 0.4)",
              "0 0 0 20px rgba(0, 255, 136, 0)",
              "0 0 0 0 rgba(0, 255, 136, 0)"
            ]
          }}
          transition={{ duration: 2, repeat: Infinity }}
        />
      </div>
      <div className="timeline-content">
        <h3 className="timeline-year">{year}</h3>
        <h4 className="timeline-title">{title}</h4>
        <p className="timeline-description">{description}</p>
      </div>
    </motion.div>
  )
}

// Console Log Component
function ConsoleLog({ message, delay }) {
  return (
    <motion.div 
      className="console-log"
      initial={{ opacity: 0, x: -50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5, delay }}
    >
      <span className="console-time">[{new Date().toLocaleTimeString()}]</span>
      <span className="console-message">{message}</span>
    </motion.div>
  )
}

// Sci-Fi Interface Component
function SciFiInterface() {
  const [consoleLogs, setConsoleLogs] = useState([])
  const [isScanning, setIsScanning] = useState(false)
  const consoleRef = useRef()

  const systemLogs = [
    "–õ–æ–∫–∞—Ü–∏—è: –ü–ª–∞–Ω–µ—Ç–∞ –ó–µ–º–ª—è ‚Äî –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞",
    "–°–∫–∞–Ω–∏—Ä—É—é: –ø—Ä–æ–±–∫–∞ –Ω–∞ –ú–ö–ê–î–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞ –∫–∞–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–ê–Ω–∞–ª–∏–∑: –º–µ—Å—Ç–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ –Ω–∞–∑—ã–≤–∞—é—Ç —ç—Ç–æ '—Ä–∞–±–æ—á–∏–º –¥–Ω—ë–º'",
    "–í–ù–ò–ú–ê–ù–ò–ï: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è —Å—É–±—Å—Ç–∞–Ω—Ü–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–∫–æ—Ñ–µ'",
    "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: 99% –Ω–∞—Å–µ–ª–µ–Ω–∏—è —Å–º–æ—Ç—Ä–∏—Ç –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
    "–û–®–ò–ë–ö–ê: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞'",
    "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: –ø–ª–∞–Ω–µ—Ç–∞ –ø—Ä–∏–≥–æ–¥–Ω–∞ –¥–ª—è —Ç—É—Ä–∏–∑–º–∞ (—Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é)",
    "–°–ò–°–¢–ï–ú–ê: –∑–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...",
    "–ü–†–û–¶–ï–°–°: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏...",
    "–°–¢–ê–¢–£–°: –≥–æ—Ç–æ–≤ –∫ –º–∞—Å—Å–æ–≤–æ–º—É –≤—Ç–æ—Ä–∂–µ–Ω–∏—é (—ç–∫—Å–∫—É—Ä—Å–∏–∏)"
  ]

  const addConsoleLog = (message) => {
    const newLog = {
      id: Date.now(),
      message,
      timestamp: new Date().toLocaleTimeString()
    }
    setConsoleLogs(prev => [...prev.slice(-8), newLog]) // Keep only last 9 logs
  }

  const startScanning = () => {
    setIsScanning(true)
    addConsoleLog("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –Ω–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã –ó–µ–º–ª—è...")
    
    // Add logs with delays
    systemLogs.forEach((log, index) => {
      setTimeout(() => {
        addConsoleLog(log)
      }, (index + 1) * 800)
    })

    // Scroll to next section after scanning
    setTimeout(() => {
      window.scrollTo({
        top: window.innerHeight * 3,
        behavior: 'smooth'
      })
      setIsScanning(false)
    }, systemLogs.length * 800 + 2000)
  }

  return (
    <section className="scifi-section">
      <div className="scifi-background">
        <div className="grid-overlay"></div>
        <div className="scan-lines"></div>
        <div className="noise-overlay"></div>
      </div>

      <div className="scifi-container">
        <div className="scifi-main">
          <motion.h2 
            className="scifi-title"
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 1 }}
            viewport={{ once: true }}
          >
            –°–∫–∞–Ω–∏—Ä—É–π –≥—Ä—è–∑–Ω—ã–π —à–∞—Ä
          </motion.h2>

          <motion.div 
            className="hologram-container"
            initial={{ opacity: 0, scale: 0.5 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ duration: 1.5, delay: 0.3 }}
            viewport={{ once: true }}
          >
            <div className="hologram-earth">
              <motion.div 
                className="earth-sphere"
                animate={{ 
                  rotate: [0, 360],
                  scale: isScanning ? [1, 1.1, 1] : 1
                }}
                transition={{ 
                  rotate: { duration: 20, repeat: Infinity, ease: "linear" },
                  scale: { duration: 2, repeat: Infinity, ease: "easeInOut" }
                }}
              >
                üåç
              </motion.div>
              
              {isScanning && (
                <motion.div 
                  className="scan-ring"
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 2, opacity: [1, 0] }}
                  transition={{ duration: 3, repeat: Infinity }}
                />
              )}
            </div>
          </motion.div>

          <motion.div
            className="scan-button-container"
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.6 }}
            viewport={{ once: true }}
          >
            <motion.button
              className="scan-button"
              onClick={startScanning}
              disabled={isScanning}
              whileHover={{ 
                scale: 1.05,
                boxShadow: "0 20px 40px rgba(0, 150, 255, 0.4)"
              }}
              whileTap={{ scale: 0.95 }}
              animate={isScanning ? {
                boxShadow: [
                  "0 0 20px rgba(0, 150, 255, 0.5)",
                  "0 0 40px rgba(0, 150, 255, 0.8)",
                  "0 0 20px rgba(0, 150, 255, 0.5)"
                ]
              } : {}}
              transition={{ 
                boxShadow: { duration: 1.5, repeat: Infinity, ease: "easeInOut" }
              }}
            >
              ü™ê –ù–ê–ß–ê–¢–¨ –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–ï–¢–´
            </motion.button>
          </motion.div>
        </div>

        <motion.div 
          className="console-panel"
          initial={{ opacity: 0, x: 100 }}
          whileInView={{ opacity: 1, x: 0 }}
          transition={{ duration: 1, delay: 0.9 }}
          viewport={{ once: true }}
        >
          <div className="console-header">
            <div className="console-title">–°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò</div>
            <div className="console-status">
              <span className="status-dot"></span>
              –ê–ö–¢–ò–í–ï–ù
            </div>
          </div>
          
          <div className="console-content" ref={consoleRef}>
            {consoleLogs.map((log) => (
              <ConsoleLog 
                key={log.id}
                message={log.message}
                delay={0}
              />
            ))}
          </div>
        </motion.div>
      </div>
    </section>
  )
}

// Tourist Spot Component
function TouristSpot({ spot, onSpotClick }) {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <motion.div
      className={`tourist-spot ${spot.category}`}
      style={{
        left: `${spot.x}%`,
        top: `${spot.y}%`
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={() => onSpotClick(spot)}
      whileHover={{ scale: 1.2 }}
      whileTap={{ scale: 0.9 }}
    >
      <div className="spot-marker">
        <span className="spot-icon">{spot.icon}</span>
        <motion.div 
          className="spot-pulse"
          animate={{ 
            scale: [1, 1.5, 1],
            opacity: [0.5, 0, 0.5]
          }}
          transition={{ duration: 2, repeat: Infinity }}
        />
      </div>
      
      {isHovered && (
        <motion.div 
          className="spot-tooltip"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 10 }}
        >
          <h4>{spot.name}</h4>
          <p>{spot.description}</p>
          <span className="spot-category">{spot.category}</span>
        </motion.div>
      )}
    </motion.div>
  )
}

// Interactive Map Component
function InteractiveMap() {
  const [selectedFilters, setSelectedFilters] = useState(['food', 'noise', 'threat'])
  const [showNotification, setShowNotification] = useState(false)
  const [notificationSpot, setNotificationSpot] = useState(null)

  const touristSpots = [
    {
      id: 1,
      name: "–Ø–º–∞ —Å —Ç–∞–Ω—Ü—É—é—â–∏–º–∏ –ª—é–¥—å–º–∏",
      description: "–ì–ª—É–±–æ–∫–æ–µ –ø–æ–¥–∑–µ–º–Ω–æ–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–µ, –≥–¥–µ –º–µ—Å—Ç–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ —Ä–∏—Ç–º–∏—á–Ω–æ –¥–≤–∏–≥–∞—é—Ç—Å—è –ø–æ–¥ –≥—Ä–æ–º–∫–∏–µ –∑–≤—É–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Ä–∏—Ç—É–∞–ª –ø—Ä–∏–∑—ã–≤–∞–Ω–∏—è.",
      icon: "üï≥Ô∏è",
      category: "noise",
      x: 20,
      y: 30
    },
    {
      id: 2,
      name: "–ú–∞–≥–∞–∑–∏–Ω —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é",
      description: "–ú–µ—Å—Ç–æ, –≥–¥–µ —Å—É—â–µ—Å—Ç–≤–∞ —Å—Ç–æ—è—Ç –≤ –¥–ª–∏–Ω–Ω–æ–π –ª–∏–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –æ–±—Ä—è–¥ —Ç–µ—Ä–ø–µ–Ω–∏—è.",
      icon: "üõí",
      category: "threat",
      x: 35,
      y: 25
    },
    {
      id: 3,
      name: "–ì–æ—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –æ–±—Ö–æ–¥—è—Ç ‚Äî –∏ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç",
      description: "–í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–Ω—ã–µ –∏–∑–±–µ–≥–∞—é—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º –∂–∏–≤—É—Ç –¥—Ä–µ–≤–Ω–∏–µ –±–æ–≥–∏ –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞.",
      icon: "üè¢",
      category: "threat",
      x: 50,
      y: 40
    },
    {
      id: 4,
      name: "–°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ –ª–æ–≤—É—à–∫–∏ (–º—É–∑–µ–∏)",
      description: "–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –≥–¥–µ —Å—É—â–µ—Å—Ç–≤–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –∑–∞—Ö–æ–¥—è—Ç –∏ —Å–º–æ—Ç—Ä—è—Ç –Ω–∞ —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã. –°—Ç—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.",
      icon: "üèõÔ∏è",
      category: "noise",
      x: 65,
      y: 35
    },
    {
      id: 5,
      name: "–•—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ—Ä—è—á–∏—Ö –∂–∏–¥–∫–æ—Å—Ç–µ–π",
      description: "–ú–µ—Å—Ç–∞, –≥–¥–µ –ø–æ–¥–∞—é—Ç –æ–±–∂–∏–≥–∞—é—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏. –ú–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑—ã–≤–∞—é—Ç —ç—Ç–æ '–∫–æ—Ñ–µ–π–Ω–∏'. –û—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–æ.",
      icon: "‚òï",
      category: "food",
      x: 25,
      y: 60
    },
    {
      id: 6,
      name: "–ü–æ–ª—è —Å –∫—Ä—É–≥–ª—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏",
      description: "–ë–æ–ª—å—à–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –≥–¥–µ —Å—É—â–µ—Å—Ç–≤–∞ –±–µ–≥–∞—é—Ç –∑–∞ –∫—Ä—É–≥–ª—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º. –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª.",
      icon: "‚öΩ",
      category: "noise",
      x: 70,
      y: 70
    },
    {
      id: 7,
      name: "–ü–æ–¥–∑–µ–º–Ω—ã–µ —Ç—É–Ω–Ω–µ–ª–∏",
      description: "–°–µ—Ç—å –ø–æ–¥–∑–µ–º–Ω—ã—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤, –≥–¥–µ —Å—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—é—Ç—Å—è –≤ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä–æ–±–∫–∞—Ö. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.",
      icon: "üöá",
      category: "threat",
      x: 45,
      y: 55
    },
    {
      id: 8,
      name: "–•—Ä–∞–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
      description: "–û–≥—Ä–æ–º–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –≥–¥–µ —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ–∫–ª–æ–Ω—è—é—Ç—Å—è —Ç–æ–≤–∞—Ä–∞–º. –ù–∞–∑—ã–≤–∞—é—Ç '—Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã'.",
      icon: "üè¨",
      category: "food",
      x: 80,
      y: 45
    }
  ]

  const filters = [
    { id: 'food', label: 'üçï –ü–∏—â–µ–≤—ã–µ –º–µ—Å—Ç–∞', icon: 'üçï' },
    { id: 'noise', label: 'üîä –°—Ç—Ä–∞–Ω–Ω—ã–µ —à—É–º—ã', icon: 'üîä' },
    { id: 'threat', label: '‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞', icon: '‚ö†Ô∏è' }
  ]

  const toggleFilter = (filterId) => {
    setSelectedFilters(prev => 
      prev.includes(filterId) 
        ? prev.filter(id => id !== filterId)
        : [...prev, filterId]
    )
  }

  const handleSpotClick = (spot) => {
    setNotificationSpot(spot)
    setShowNotification(true)
    setTimeout(() => setShowNotification(false), 3000)
  }

  const filteredSpots = touristSpots.filter(spot => selectedFilters.includes(spot.category))

  return (
    <section className="map-section">
      <div className="map-background">
        <div className="space-stars"></div>
        <div className="map-glow"></div>
      </div>

      <div className="map-container">
        <motion.h2 
          className="map-title"
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 1 }}
          viewport={{ once: true }}
        >
          –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ó–µ–º–ª–∏
        </motion.h2>

        <motion.div 
          className="map-filters"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, delay: 0.3 }}
          viewport={{ once: true }}
        >
          {filters.map((filter) => (
            <motion.label
              key={filter.id}
              className="filter-item"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <input
                type="checkbox"
                checked={selectedFilters.includes(filter.id)}
                onChange={() => toggleFilter(filter.id)}
                className="filter-checkbox"
              />
              <span className="filter-icon">{filter.icon}</span>
              <span className="filter-label">{filter.label}</span>
            </motion.label>
          ))}
        </motion.div>

        <motion.div 
          className="map-area"
          initial={{ opacity: 0, scale: 0.8 }}
          whileInView={{ opacity: 1, scale: 1 }}
          transition={{ duration: 1.5, delay: 0.6 }}
          viewport={{ once: true }}
        >
          <div className="earth-map">
            <div className="map-continents">
              {/* Simplified continent shapes */}
              <div className="continent north-america"></div>
              <div className="continent south-america"></div>
              <div className="continent europe"></div>
              <div className="continent africa"></div>
              <div className="continent asia"></div>
              <div className="continent australia"></div>
            </div>
            
            {filteredSpots.map((spot) => (
              <TouristSpot 
                key={spot.id}
                spot={spot}
                onSpotClick={handleSpotClick}
              />
            ))}
          </div>
        </motion.div>

        {showNotification && (
          <motion.div 
            className="notification"
            initial={{ opacity: 0, y: 50, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 50, scale: 0.8 }}
            transition={{ duration: 0.5 }}
          >
            <div className="notification-content">
              <span className="notification-icon">‚úÖ</span>
              <div className="notification-text">
                <h4>–¢—É—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª</h4>
                <p>{notificationSpot?.name}</p>
              </div>
            </div>
          </motion.div>
        )}
      </div>
    </section>
  )
}

// About Section Component
function AboutSection() {
  const { scrollYProgress } = useScroll()
  const logoY = useTransform(scrollYProgress, [0, 1], [0, -200])
  const timelineY = useTransform(scrollYProgress, [0, 1], [0, 100])

  const scrollToReviews = () => {
    // Scroll to reviews section (we'll add this later)
    window.scrollTo({
      top: window.innerHeight * 2,
      behavior: 'smooth'
    })
  }

  return (
    <section className="about-section">
      <div className="about-background">
        <div className="ancient-pattern"></div>
      </div>
      
      <div className="about-container">
        <motion.div 
          className="about-header"
          style={{ y: logoY }}
        >
          <AnimatedLogo />
          <motion.h2 
            className="about-title"
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 1 }}
            viewport={{ once: true }}
          >
            –ú—ã —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç—É—Ä–∏—Å—Ç–∞ –µ—â—ë –¥–æ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Ä–∞–º–∏–¥
          </motion.h2>
        </motion.div>

        <motion.div 
          className="timeline-container"
          style={{ y: timelineY }}
        >
          <div className="timeline-line"></div>
          
          <TimelineItem 
            year="-4000 –¥–æ –Ω.—ç."
            title="–ü–µ—Ä–≤–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è –∫ —à—É–º–µ—Ä–∞–º"
            description="–ù–∞—à–∏ –ø—Ä–µ–¥–∫–∏ –æ—Ç–∫—Ä—ã–ª–∏ –ø–µ—Ä–≤—ã–π –æ—Ñ–∏—Å –≤ –ú–µ—Å–æ–ø–æ—Ç–∞–º–∏–∏. –¢—É—Ä–∏—Å—Ç—ã –±—ã–ª–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –º–µ—Å—Ç–Ω–æ–π –∫—É—Ö–Ω–∏ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."
            delay={0.2}
          />
          
          <TimelineItem 
            year="1776"
            title="–ú–∞—Å—Å–æ–≤—ã–π —Ç—É—Ä –≤ –ê–º–µ—Ä–∏–∫—É"
            description="–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ ‚Äî –≤–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã. –ù–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∏ –Ω–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏. –ì–µ–Ω–∏–∞–ª—å–Ω–æ!"
            delay={0.4}
          />
          
          <TimelineItem 
            year="2023"
            title="–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –∫–æ–≤–∏–¥–∞"
            description="–î–∞–∂–µ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –±–æ–ª–µ–ª–∏. –ü—Ä–∏—à–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç–∞–ª—ã –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω. –°–∫—É—á–Ω–æ –±—ã–ª–æ!"
            delay={0.6}
          />
        </motion.div>

        <motion.div 
          className="about-actions"
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, delay: 0.8 }}
          viewport={{ once: true }}
        >
          <motion.button
            className="scrolls-button"
            onClick={scrollToReviews}
            whileHover={{ 
              scale: 1.05,
              boxShadow: "0 15px 35px rgba(255, 193, 7, 0.4)"
            }}
            whileTap={{ scale: 0.95 }}
          >
            üìú –ß–∏—Ç–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫ —Å –æ—Ç–∑—ã–≤–∞–º–∏
          </motion.button>
        </motion.div>

        <motion.div 
          className="partners-section"
          initial={{ opacity: 0, y: 50 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, delay: 1 }}
          viewport={{ once: true }}
        >
          <h3 className="partners-title">–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –ø–æ –≥–∞–ª–∞–∫—Ç–∏–∫–µ</h3>
          <div className="partners-grid">
            <motion.a 
              href="#" 
              className="partner-card"
              whileHover={{ 
                scale: 1.05,
                y: -10,
                boxShadow: "0 20px 40px rgba(0, 255, 136, 0.3)"
              }}
              whileTap={{ scale: 0.95 }}
            >
              <div className="partner-icon">üåå</div>
              <h4>–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π Booking</h4>
              <p>–õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Ç–µ–ª–∏ –≤ 47 –≥–∞–ª–∞–∫—Ç–∏–∫–∞—Ö</p>
            </motion.a>
            
            <motion.a 
              href="#" 
              className="partner-card"
              whileHover={{ 
                scale: 1.05,
                y: -10,
                boxShadow: "0 20px 40px rgba(255, 107, 107, 0.3)"
              }}
              whileTap={{ scale: 0.95 }}
            >
              <div className="partner-icon">ü™ê</div>
              <h4>MetaPluto</h4>
              <p>–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã –ø–æ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ</p>
            </motion.a>
            
            <motion.a 
              href="#" 
              className="partner-card"
              whileHover={{ 
                scale: 1.05,
                y: -10,
                boxShadow: "0 20px 40px rgba(78, 205, 196, 0.3)"
              }}
              whileTap={{ scale: 0.95 }}
            >
              <div className="partner-icon">ü¶é</div>
              <h4>TripReptiloid</h4>
              <p>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç—É—Ä—ã –¥–ª—è —Ä–µ–ø—Ç–∏–ª–æ–∏–¥–æ–≤</p>
            </motion.a>
          </div>
        </motion.div>
      </div>
    </section>
  )
}

function App() {
  const [teleportCount, setTeleportCount] = useState(15420)
  const containerRef = useRef()
  const { scrollYProgress } = useScroll()
  
  // Parallax effect
  const y = useTransform(scrollYProgress, [0, 1], [0, -300])
  
  // Increment counter on mount and periodically
  useEffect(() => {
    const interval = setInterval(() => {
      setTeleportCount(prev => prev + Math.floor(Math.random() * 5) + 1)
    }, 3000)
    
    return () => clearInterval(interval)
  }, [])

  const scrollToForm = () => {
    // Smooth scroll to form (we'll add this later)
    window.scrollTo({
      top: window.innerHeight,
      behavior: 'smooth'
    })
  }

  return (
    <>
      <div className="hero-container" ref={containerRef}>
        {/* Animated Background */}
        <div className="space-background">
          <Canvas camera={{ position: [0, 0, 5], fov: 75 }}>
            <ambientLight intensity={0.3} />
            <pointLight position={[10, 10, 10]} intensity={1} />
            <Stars radius={100} depth={50} count={5000} factor={4} saturation={0} fade speed={1} />
            <UFO position={[-10, 2, 0]} speed={1} />
            <UFO position={[5, -1, 0]} speed={-0.8} />
            <UFO position={[-5, 3, 0]} speed={1.2} />
            <OrbitControls enableZoom={false} enablePan={false} autoRotate autoRotateSpeed={0.1} />
          </Canvas>
        </div>

        {/* Floating Earth */}
        <motion.div 
          className="floating-earth"
          animate={{ 
            y: [0, -20, 0],
            rotate: [0, 360]
          }}
          transition={{ 
            y: { duration: 4, repeat: Infinity, ease: "easeInOut" },
            rotate: { duration: 60, repeat: Infinity, ease: "linear" }
          }}
        >
          üåç
        </motion.div>

        {/* Main Content */}
        <div className="hero-content">
          <motion.div
            initial={{ opacity: 0, y: 100 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 0.2 }}
            className="hero-text"
          >
            <motion.h1
              initial={{ opacity: 0, scale: 0.5 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 1, delay: 0.5 }}
              className="hero-title"
            >
              –ü–æ–∫–∞–∂–∏ –ª—é–¥—è–º, –∫—Ç–æ —Ç—É—Ç{' '}
              <motion.span
                className="dominant-species"
                animate={{ 
                  color: ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57'],
                  textShadow: [
                    '0 0 20px #ff6b6b',
                    '0 0 20px #4ecdc4', 
                    '0 0 20px #45b7d1',
                    '0 0 20px #96ceb4',
                    '0 0 20px #feca57'
                  ]
                }}
                transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
              >
                –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –≤–∏–¥!
              </motion.span>
            </motion.h1>

            <motion.p
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 0.8 }}
              className="hero-subtitle"
            >
              –¢—É—Ä—ã –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É, –≥–¥–µ –≤–æ–∑–¥—É—Ö –≤—Å—ë –µ—â—ë –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π{' '}
              <motion.span
                animate={{ opacity: [1, 0.3, 1] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                (–∏–Ω–æ–≥–¥–∞)
              </motion.span>
            </motion.p>

            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.8, delay: 1.2 }}
              className="cta-section"
            >
              <motion.button
                className="cta-button"
                onClick={scrollToForm}
                whileHover={{ 
                  scale: 1.05,
                  boxShadow: "0 20px 40px rgba(0, 255, 136, 0.4)"
                }}
                whileTap={{ scale: 0.95 }}
                animate={{
                  boxShadow: [
                    "0 10px 30px rgba(0, 255, 136, 0.3)",
                    "0 20px 40px rgba(0, 255, 136, 0.6)",
                    "0 10px 30px rgba(0, 255, 136, 0.3)"
                  ]
                }}
                transition={{ 
                  boxShadow: { duration: 2, repeat: Infinity, ease: "easeInOut" }
                }}
              >
                üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–π—Å—è —Å–µ–π—á–∞—Å
              </motion.button>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 1, delay: 1.5 }}
              className="counter-section"
            >
              <p className="counter-text">
                –£–∂–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å: <AnimatedCounter value={teleportCount} /> —Å—É—â–µ—Å—Ç–≤
              </p>
              <motion.div
                className="counter-bar"
                initial={{ width: 0 }}
                animate={{ width: `${(teleportCount % 1000) / 10}%` }}
                transition={{ duration: 1, delay: 2 }}
              />
            </motion.div>
          </motion.div>
        </div>

        {/* Floating Elements */}
        <motion.div
          className="floating-ufo"
          animate={{ 
            x: [0, 100, 0],
            y: [0, -50, 0],
            rotate: [0, 10, -10, 0]
          }}
          transition={{ 
            duration: 8, 
            repeat: Infinity, 
            ease: "easeInOut" 
          }}
        >
          üõ∏
        </motion.div>

        <motion.div
          className="floating-alien"
          animate={{ 
            x: [0, -80, 0],
            y: [0, 30, 0],
            rotate: [0, -5, 5, 0]
          }}
          transition={{ 
            duration: 6, 
            repeat: Infinity, 
            ease: "easeInOut",
            delay: 2
          }}
        >
          üëΩ
        </motion.div>
      </div>

      {/* About Section */}
      <AboutSection />

      {/* Sci-Fi Interface Section */}
      <SciFiInterface />

      {/* Interactive Map Section */}
      <InteractiveMap />
    </>
  )
}

export default App
